enum MediNums{
	SCAN_FIREMODE=1,
	SCAN_ACCURACY=2,
	SCAN_INPROGRESS=3,
}

class HDScanner:HDWoundFixer{
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	default{
		-weapon.no_auto_switch
		+inventory.invbar
		+hdweapon.fitsinbackpack
		-nointeraction
		weapon.selectionorder 1002;
		weapon.slotnumber 9;
		weapon.slotpriority 0;
		scale 0.3;
		tag "$TAG_DMS";
		hdweapon.refid "SCA";
		inventory.icon "MEDIZ0";
	}
	override double weaponbulk(){
		return 10;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(weaponstatus[SCAN_INPROGRESS]) {
			sb.drawstring(
				sb.pnewsmallfont,"SCANNING",(-25,-10),
				sb.DI_TEXT_ALIGN_RIGHT|sb.DI_TRANSLATABLE|sb.DI_SCREEN_CENTER_BOTTOM,
				Font.CR_GREEN, scale:(0.25,0.25)
			);
			int w = (weaponstatus[SCAN_INPROGRESS]/5)-1;
			if (w < 0) w = 0;
			sb.fill(
				color(255,99,213,92),
				-40,-5,
				w,2,
				sb.DI_SCREEN_CENTER_BOTTOM
			);
		}
	}
	override string gethelptext(){
		return
		WEPHELP_RELOAD.."  Take off armour\n"
		..WEPHELP_INJECTOR.."\n";
	}
	action void A_MedikitReady(){
		A_WeaponReady(WRF_NOFIRE|WRF_ALLOWUSER1|WRF_ALLOWUSER3);
		if(!player)return;
		int bt=player.cmd.buttons;

		//don't do the other stuff if holding reload
		//LET THE RELOAD STATE HANDLE EVERYTHING ELSE
		if(bt&BT_RELOAD){
			setweaponstate("reload");
			return;
		}
		
		if(bt&BT_USER2){
			setweaponstate("firemode");
			return;
		}

		//wait for the player to decide what they're doing
		if(bt&BT_ATTACK&&bt&BT_ALTATTACK)return;

		//use on someone else
		if(bt&BT_ALTATTACK){
			setweaponstate("diagnoseother");
			return;
		}

		//self
		if(bt&BT_ATTACK){
			invoker.bwimpy_weapon=false;  //uncloak

			//radsuit, etc. blocks everything
			let blockinv=HDWoundFixer.CheckCovered(self,CHECKCOV_ONLYFULL);
			if(blockinv){
				A_TakeOffFirst(blockinv.gettag());
				setweaponstate("nope");
				return;
			}
			if(pitch<min(player.maxpitch,80)){
				//move downwards
				let hdp=hdplayerpawn(self);
				if(hdp)hdp.gunbraced=false;
				A_MuzzleClimb(0,5,0,5);
			}
			//diagnose
			else{
				setweaponstate("diagnose");
				return;
				}
			}
		}
	states{
	select:	select:
		TNT1 A 10{
			if(!DoHelpText()) return;
			A_WeaponMessage("\cg+++ \cjMEDIKIT \cg+++\c-\n\n\nPress and hold Fire\nto patch yourself up.",175);
		}
		goto super::select;
	ready:
		TNT1 A 1 A_MedikitReady();
		goto readyend;
	altfire:
	althold:
	diagnose:
		TNT1 A 0 A_WeaponMessage("\cdMedikit Auto-Diagnostic Tool engaged.\c-\n\n\ccScanning, please wait...");
		TNT1 AAAAAAAAAAAA 2{
			A_StartSound("medikit/scan",CHAN_WEAPON,volume:0.5);
			A_SetBlend("aa aa 88",0.04,1);
		}
		TNT1 A 0 A_ScanResults(self,12);
		TNT1 A 0 A_Refire("nope");
		goto readyend;
	diagnoseother:
		TNT1 A 0{
			A_WeaponMessage("\cdMedikit Auto-Diagnostic Tool engaged.\c-\n\n\ccScanning, please wait...");
			invoker.target=null;
			invoker.weaponstatus[SCAN_ACCURACY]=0;
		}
		TNT1 AAAAAAAAAAAA 2{
			A_StartSound("medikit/scan",CHAN_WEAPON,volume:0.4);
			flinetracedata mediline;
			linetrace(
				angle,42,pitch,
				offsetz:height-12,
				data:mediline
			);
			let mha=mediline.hitactor;
			if(
				!mha
				||(invoker.target&&mha!=invoker.target)
			){
				invoker.target=null;
				invoker.weaponstatus[SCAN_ACCURACY]=0;
				return;
			}
			invoker.target=mha;
			invoker.weaponstatus[SCAN_ACCURACY]++;
		}
		TNT1 A 0 A_ScanResults(invoker.target,invoker.weaponstatus[SCAN_ACCURACY]);
		TNT1 A 0 A_Refire("nope");
		goto readyend;

	spawn:
		MEDI Z -1;
		wait;
	}
		action void A_ScanResults(actor scanactor,double scanaccuracy){
			A_StartSound("medikit/done",CHAN_WEAPON);
			double thrownoff=scanaccuracy-12;
			if(!scanactor||abs(thrownoff)>10){
			A_WeaponMessage("\caMedikit Auto-Diagnostic Tool failed.");
			invoker.target=null;
			invoker.weaponstatus[SCAN_ACCURACY]=0;
			return;
		}

		if(HDWoundFixer.CheckCovered(scanactor,CHECKCOV_CHECKBODY))thrownoff+=5.;

		string playerspecs="";
		let slf=HDPlayerPawn(scanactor);
		if(slf){
			thrownoff+=frandom(0,slf.aggravateddamage);
			string bloodloss=string.format("%.2f",
				double(slf.bloodloss)/(HDCONST_BLOODBAGAMOUNT<<2)
				+frandom(0,thrownoff*0.2)
			);
			playerspecs="\n\ccBurns: \cq"..slf.burncount
				.."\n\ccTissue Damage: \cq"..slf.oldwoundcount
				.."\n\ccBlood loss: \ca"..bloodloss.." \cctransfusion units";
		}

		string openwounds="";
		string bandaged="";
		string treated="";
		hdbleedingwound bldw=null;
		thinkeriterator bldit=thinkeriterator.create("HDBleedingWound");
		int rowcount=0;
		while(bldw=HDBleedingWound(bldit.next())){
			if(
				bldw
				&&bldw.bleeder==scanactor
			){
				if(
					!bldw.depth+frandom(-thrownoff,thrownoff)
					&&!bldw.patched
					&&!bldw.healing
				)continue;

				string ams=
					(rowcount?"  ":"\n")
					.."\cg"..string.format("%.1f",bldw.depth).."\cc/\ck"..
					string.format("%.1f",bldw.patched+frandom(-thrownoff,thrownoff)).."\cc/\cu"..
					string.format("%.1f",bldw.healing)
				;
				openwounds=openwounds.." "..ams;

				if(rowcount==2)rowcount=0;else rowcount++;
			}
		}
		if(openwounds=="")openwounds=" none";


		A_WeaponMessage("Medikit Auto-Diagnostic for
\cy"..scanactor.gettag().."

\ccWounds:\cg"..openwounds.."
"..playerspecs,270);

		A_Log("Medikit Auto-Diagnostic for
\cy"..scanactor.gettag().."
\ccWounds:\cg"..openwounds..playerspecs,true);
	}
	// I'll language-lump-ify all this stuff later.
	override string pickupmessage(){
		return "Picked up a dedicated medical scanner.";
	}
}