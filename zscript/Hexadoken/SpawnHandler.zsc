//-------------------------------------------------
// Huge credits to FDA for the Radtech Event handler which this is based off of. It's been incredibly helpful.
//-------------------------------------------------

// Struct for itemspawn information.
class HexaSpawnItem play {
    // ID by string for spawner
    string spawnName;

    // ID by string for spawnees
    Array<HexaSpawnItemEntry> spawnReplaces;

    // Whether or not to persistently spawn.
    bool isPersistent;

    // Whether or not to replace the original item.
    bool replaceItem;

    string toString() {

        let replacements = "[";

        foreach (spawnReplace : spawnReplaces) replacements = replacements..", "..spawnReplace.toString();

        replacements = replacements.."]";

        return String.format("{ spawnName=%s, spawnReplaces=%s, isPersistent=%b, replaceItem=%b }", spawnName, replacements, isPersistent, replaceItem);
    }
}

class HexaSpawnItemEntry play {

    string name;
    int    chance;

    string toString() {
        return String.format("{ name=%s, chance=%s }", name, chance >= 0 ? "1/"..(chance + 1) : "never");
    }
}

// Struct for passing useinformation to ammunition.
class HexaSpawnAmmo play {

    // ID by string for the header ammo.
    string ammoName;

    // ID by string for weapons using that ammo.
    Array<string> weaponNames;

    string toString() {

        let weapons = "[";

        foreach (weaponName : weaponNames) weapons = weapons..", "..weaponName;

        weapons = weapons.."]";

        return String.format("{ ammoName=%s, weaponNames=%s }", ammoName, weapons);
    }
}



// One handler to rule them all.
class HexaDokenHandler : EventHandler {

    // List of persistent classes to completely ignore.
    // This -should- mean this mod has no performance impact.
    static const string blacklist[] = {
        'HDSmoke',
        'BloodTrail',
        'CheckPuff',
        'WallChunk',
        'HDBulletPuff',
        'HDFireballTail',
        'ReverseImpBallTail',
        'HDSmokeChunk',
        'ShieldSpark',
        'HDFlameRed',
        'HDMasterBlood',
        'PlantBit',
        'HDBulletActor',
        'HDLadderSection'
    };

    // List of CVARs for Backpack Spawns
    array<Class <Inventory> > backpackBlacklist;

    // Cache of Ammo Box Loot Table
    private HDAmBoxList ammoBoxList;

    // List of weapon-ammo associations.
    // Used for ammo-use association on ammo spawn (happens very often).
    array<HexaSpawnAmmo> ammoSpawnList;

    // List of item-spawn associations.
    // used for item-replacement on mapload.
    array<HexaSpawnItem> itemSpawnList;

    bool cvarsAvailable;

    // appends an entry to itemSpawnList;
    void addItem(string name, Array<HexaSpawnItemEntry> replacees, bool persists, bool rep=true) {

        if (hd_debug) {

            let msg = "Adding "..(persists ? "Persistent" : "Non-Persistent").." Replacement Entry for "..name..": [";

            foreach (replacee : replacees) msg = msg..", "..replacee.toString();

            console.printf(msg.."]");
        }

        // Creates a new struct;
        HexaSpawnItem spawnee = HexaSpawnItem(new('HexaSpawnItem'));

        // Populates the struct with relevant information,
        spawnee.spawnName = name;
        spawnee.isPersistent = persists;
        spawnee.replaceItem = rep;
        spawnee.spawnReplaces.copy(replacees);

        // Pushes the finished struct to the array.
        itemSpawnList.push(spawnee);
    }

    HexaSpawnItemEntry addItemEntry(string name, int chance) {

        // Creates a new struct;
        HexaSpawnItemEntry spawnee = HexaSpawnItemEntry(new('HexaSpawnItemEntry'));
        spawnee.name = name;
        spawnee.chance = chance;
        return spawnee;
    }

    // appends an entry to ammoSpawnList;
    void addAmmo(string name, Array<string> weapons) {

        if (hd_debug) {
            let msg = "Adding Ammo Association Entry for "..name..": [";

            foreach (weapon : weapons) msg = msg..", "..weapon;

            console.printf(msg.."]");
        }

        // Creates a new struct;
        HexaSpawnAmmo spawnee = HexaSpawnAmmo(new('HexaSpawnAmmo'));
        spawnee.ammoName = name;
        spawnee.weaponNames.copy(weapons);

        // Pushes the finished struct to the array.
        ammoSpawnList.push(spawnee);
    }


    // Populates the replacement and association arrays.
    void init() {

        cvarsAvailable = true;

        //-----------------
        // Backpack Spawns
        //-----------------

        if (!boss9mm_allowBackpacks)    backpackBlacklist.push((Class<Inventory>)('BossRifleButIts9mm'));
        if (!boss4mm_allowBackpacks)    backpackBlacklist.push((Class<Inventory>)('BossRifleButIts4mm'));
        if (!bas_allowBackpacks)        backpackBlacklist.push((Class<Inventory>)('Bossmerg'));
        if (!bog_allowBackpacks)        backpackBlacklist.push((Class<Inventory>)('BogRifle'));
        if (!boss5mm_allowBackpacks)    backpackBlacklist.push((Class<Inventory>)('BossRifleButItsFuckingPink'));
        if (!nsb_allowBackpacks)        backpackBlacklist.push((Class<Inventory>)('HexaNoScopeBoss'));
        if (!worstBoss_allowBackpacks)  backpackBlacklist.push((Class<Inventory>)('BossRifleButItsTheWorst'));
        if (!gar_allowBackpacks)        backpackBlacklist.push((Class<Inventory>)('HDGarand'));

        // if (!boss9mmmag_allowBackpacks) backpackBlacklist.push((Class<Inventory>)('HD9mClip'));
        if (!bogmag_allowBackpacks)     backpackBlacklist.push((Class<Inventory>)('HDOmgClip'));
        if (!garmag_allowBackpacks)     backpackBlacklist.push((Class<Inventory>)('HDGarandClip'));
        if (!garmag_allowBackpacks)     backpackBlacklist.push((Class<Inventory>)('HDGarand3006Clip'));
        if (!garmag_allowBackpacks)     backpackBlacklist.push((Class<Inventory>)('HDGarandClipGiver'));


        //------------
        // Ammunition
        //------------

        // 9mm Clips
        Array<string> wep_9mmClip;
        wep_9mmClip.push('BossRifleButIts9mm');
        addAmmo('HD9mClip', wep_9mmClip);

        // 7mm Clips
        Array<string> wep_7mmClip;
        wep_7mmClip.push('HexaNoScopeBoss');
        addAmmo('HD7mClip', wep_7mmClip);

        // .50 OMG Clips
        Array<string> wep_omgClip;
        wep_omgClip.push('BogRifle');
        addAmmo('HDOmgClip', wep_omgClip);

        // M1 Garand Clips
        Array<string> wep_garandClip;
        wep_garandClip.push('HDGarand');
        addAmmo('HDGarandClip', wep_garandClip);

        // M1 Garand .30-06 Clips
        Array<string> wep_3006Clip;
        wep_3006Clip.push('HDGarand');
        addAmmo('HDGarand3006Clip', wep_3006Clip);

        // 9mm
        Array<string> wep_9mm;
        wep_9mm.push('BossRifleButIts9mm');
        addAmmo('HDPistolAmmo', wep_9mm);

        // 4mm
        Array<string> wep_4mm;
        wep_4mm.push('BossRifleButIts4mm');
        wep_4mm.push('SpeedRunLoader');
        addAmmo('FourMilAmmo', wep_4mm);

        // 12 Gauge Shells
        Array<string> wep_Shells;
        wep_Shells.push('Bossmerg');
        addAmmo('HDShellAmmo', wep_Shells);

        // 7mm
        Array<string> wep_7mm;
        wep_7mm.push('HexaNoScopeBoss');
        wep_7mm.push('BossRifleButItsTheWorst');
        addAmmo('SevenMilAmmo', wep_7mm);

        // 7mm Recast
        Array<string> wep_7mmR;
        wep_7mmR.push('HexaNoScopeBoss');
        addAmmo('SevenMilAmmoRecast', wep_7mmR);

        // 7mm Brass
        Array<string> wep_7mmB;
        wep_7mmB.push('SpeedRunLoader');
        addAmmo('SevenMilBrass', wep_7mmB);

        // 5mm
        Array<string> wep_5mm;
        wep_5mm.push('BossRifleButItsFuckingPink');
        addAmmo('HD5MM_Ammo', wep_5mm);

        // .50 OMG
        Array<string> wep_50OMG;
        wep_50OMG.push('BogRifle');
        addAmmo('HD50OMGAmmo', wep_50OMG);

        // .30-06
        Array<string> wep_3006;
        wep_3006.push('HDGarand');
        addAmmo('ThirtyAughtSixAmmo', wep_3006);

        //------------
        // Weaponry
        //------------

        // 9mm Boss Rifle
        Array<HexaSpawnItemEntry> spawns_9mmBoss;
        spawns_9mmBoss.push(addItemEntry('BossRifleSpawner', boss9mm_boss_spawn_bias));
        spawns_9mmBoss.push(addItemEntry('PistolReplaces', boss9mm_pistol_spawn_bias));
        spawns_9mmBoss.push(addItemEntry('ClipBoxPickup2', boss9mm_clipbox_spawn_bias));
        addItem('BossRifleNine', spawns_9mmBoss, boss9mm_persistent_spawning);

        // 4mm Boss Rifle
        Array<HexaSpawnItemEntry> spawns_4mmBoss;
        spawns_4mmBoss.push(addItemEntry('BossRifleSpawner', boss4mm_boss_spawn_bias));
        spawns_4mmBoss.push(addItemEntry('ChaingunReplaces', boss4mm_chaingun_spawn_bias));
        addItem('BossRifleFour', spawns_4mmBoss, boss4mm_persistent_spawning);

        // 12ga Boss Rifle
        Array<HexaSpawnItemEntry> spawns_Bossmerg;
        spawns_Bossmerg.push(addItemEntry('BossRifleSpawner', bas_boss_spawn_bias));
        spawns_Bossmerg.push(addItemEntry('HunterRandom', bas_hunter_spawn_bias));
        spawns_Bossmerg.push(addItemEntry('SlayerRandom', bas_slayer_spawn_bias));
        addItem('Bossmerg', spawns_Bossmerg, bas_persistent_spawning);

        // .50 OMG Boss Rifle
        Array<HexaSpawnItemEntry> spawns_BogRifle;
        spawns_BogRifle.push(addItemEntry('BossRifleSpawner', bog_boss_spawn_bias));
        spawns_BogRifle.push(addItemEntry('PlasmaReplaces', bog_plasma_spawn_bias));
        spawns_BogRifle.push(addItemEntry('BFGReplaces', bog_bfg_spawn_bias));
        addItem('BogRifleSpawner', spawns_BogRifle, bog_persistent_spawning);

        // 5mm Boss Rifle
        Array<HexaSpawnItemEntry> spawns_5mmBoss;
        spawns_5mmBoss.push(addItemEntry('BossRifleSpawner', boss5mm_boss_spawn_bias));
        spawns_5mmBoss.push(addItemEntry('ChaingunReplaces', boss5mm_chaingun_spawn_bias));
        addItem('BossRifleButItsFuckingPink', spawns_5mmBoss, boss5mm_persistent_spawning);

        // No-scope Boss Rifle
        Array<HexaSpawnItemEntry> spawns_NoScopeBoss;
        spawns_NoScopeBoss.push(addItemEntry('BossRifleSpawner', nsb_boss_spawn_bias));
        addItem('HexaNoScopeBossSpawner', spawns_NoScopeBoss, nsb_persistent_spawning);

        // The Worst Boss Rifle
        Array<HexaSpawnItemEntry> spawns_WorstBoss;
        spawns_WorstBoss.push(addItemEntry('BossRifleSpawner', worstBoss_boss_spawn_bias));
        addItem('BossRifleButItsTheWorst', spawns_WorstBoss, worstBoss_persistent_spawning);

        // M1 Garand
        Array<HexaSpawnItemEntry> spawns_Garand;
        spawns_Garand.push(addItemEntry('ChaingunReplaces', gar_chaingun_spawn_bias));
        spawns_Garand.push(addItemEntry('LiberatorRandom', gar_liberator_spawn_bias));
        addItem('HDGarandRandom', spawns_Garand, gar_persistent_spawning);

        //------------
        // Items
        //------------

        Array<HexaSpawnItemEntry> spawns_scanner;
        spawns_scanner.push(additementry('PortableHealingItem', dms_stimpack_bias));
        spawns_scanner.push(additementry('PortableHealingItemBig', dms_medikit_bias));
        spawns_scanner.push(additementry('PortableHealingItemBigger', dms_zerk_bias));
        addItem('HDScanner', spawns_scanner, dms_persistent_spawning);
    }

    // Random stuff, stores it and forces negative values just to be 0.
    bool giveRandom(int chance) {
        if (chance > -1) {
            let result = random(0, chance);

            if (hd_debug) console.printf("Rolled a "..(result + 1).." out of "..(chance + 1));

            return result == 0;
        }

        return false;
    }

    // Tries to replace the item during spawning.
    bool tryReplaceItem(ReplaceEvent e, string spawnName, int chance) {
        if (giveRandom(chance)) {
            if (hd_debug) console.printf(e.replacee.getClassName().." -> "..spawnName);

            e.replacement = spawnName;

            return true;
        }

        return false;
    }

    // Tries to create the item via random spawning.
    bool tryCreateItem(Actor thing, string spawnName, int chance) {
        if (giveRandom(chance)) {
            if (hd_debug) console.printf(thing.getClassName().." + "..spawnName);

            Actor.Spawn(spawnName, thing.pos);

            return true;
        }

        return false;
    }

    override void worldLoaded(WorldEvent e) {

        // Populates the main arrays if they haven't been already.
        if (!cvarsAvailable) init();

        foreach (bl : backpackBlacklist) {
            if (hd_debug) console.printf("Removing "..bl.getClassName().." from Backpack Spawn Pool");

            BPSpawnPool.removeItem(bl);
        }
    }

    override void checkReplacement(ReplaceEvent e) {

        // Populates the main arrays if they haven't been already.
        if (!cvarsAvailable) init();

        // If there's nothing to replace or if the replacement is final, quit.
        if (!e.replacee || e.isFinal) return;

        // If thing being replaced is blacklisted, quit.
        foreach (bl : blacklist) if (e.replacee is bl) return;

        string candidateName = e.replacee.getClassName();

        // If current map is Range, quit.
        if (level.MapName == 'RANGE') return;

        handleWeaponReplacements(e, candidateName);
    }

    override void worldThingSpawned(WorldEvent e) {

        // Populates the main arrays if they haven't been already.
        if (!cvarsAvailable) init();

        // If thing spawned doesn't exist, quit.
        if (!e.thing) return;

        // If thing spawned is blacklisted, quit.
        foreach (bl : blacklist) if (e.thing is bl) return;

        // Handle Ammo Box Loot Table Filtering
        if (e.thing is 'HDAmBox' && !ammoBoxList) handleAmmoBoxLootTable();

        string candidateName = e.thing.getClassName();

        // Pointers for specific classes.
        let ammo = HDAmmo(e.thing);

        // If the thing spawned is an ammunition, add any and all items that can use this.
        if (ammo) handleAmmoUses(ammo, candidateName);

        // If current map is Range, quit.
        if (level.MapName == 'RANGE') return;

        handleWeaponSpawns(e.thing, ammo, candidateName);
    }

    private void handleAmmoBoxLootTable() {
        ammoBoxList = HDAmBoxList.Get();

        foreach (bl : backpackBlacklist) {
            let index = ammoBoxList.invClasses.find(bl.getClassName());

            if (index != ammoBoxList.invClasses.Size()) {
                if (hd_debug) console.printf("Removing "..bl.getClassName().." from Ammo Box Loot Table");

                ammoBoxList.invClasses.Delete(index);
            }
        }
    }

    private void handleAmmoUses(HDAmmo ammo, string candidateName) {
        foreach (ammoSpawn : ammoSpawnList) if (candidateName ~== ammoSpawn.ammoName) {
            if (hd_debug) {
                console.printf("Adding the following to the list of items that use "..ammo.getClassName().."");
                foreach (weapon : ammoSpawn.weaponNames) console.printf("* "..weapon);
            }

            ammo.itemsThatUseThis.append(ammoSpawn.weaponNames);
        }
    }

    private void handleWeaponReplacements(ReplaceEvent e, string candidateName) {

        // Checks if the level has been loaded more than 1 tic.
        bool prespawn = !(level.maptime > 1);

        // Iterates through the list of item candidates for e.thing.
        foreach (itemSpawn : itemSpawnList) {

            if ((prespawn || itemSpawn.isPersistent) && itemSpawn.replaceItem) {
                foreach (spawnReplace : itemSpawn.spawnReplaces) {
                    if (spawnReplace.name ~== candidateName) {
                        if (hd_debug) console.printf("Attempting to replace "..candidateName.." with "..itemSpawn.spawnName.."...");

                        if (tryReplaceItem(e, itemSpawn.spawnName, spawnReplace.chance)) return;
                    }
                }
            }
        }
    }

    private void handleWeaponSpawns(Actor thing, HDAmmo ammo, string candidateName) {

        // Checks if the level has been loaded more than 1 tic.
        bool prespawn = !(level.maptime > 1);

        // Iterates through the list of item candidates for e.thing.
        foreach (itemSpawn : itemSpawnList) {

            // if an item is owned or is an ammo (doesn't retain owner ptr),
            // do not replace it.
            let item = Inventory(thing);
            if (
                (prespawn || itemSpawn.isPersistent)
             && (!(item && item.owner) && (!ammo || prespawn))
             && !itemSpawn.replaceItem
            ) {
                foreach (spawnReplace : itemSpawn.spawnReplaces) {
                    if (spawnReplace.name ~== candidateName) {
                        if (hd_debug) console.printf("Attempting to spawn "..itemSpawn.spawnName.." with "..candidateName.."...");

                        if (tryCreateItem(thing, itemSpawn.spawnName, spawnReplace.chance)) return;
                    }
                }
            }
        }
    }
}
