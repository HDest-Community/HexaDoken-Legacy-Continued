// ------------------------------------------------------------
// M1 Garand
// ------------------------------------------------------------

class GarandAmmoThinker: Thinker{
	int oldammo, realammo;
	private transient int curammo;

	GarandAmmoThinker Init(){
		ChangeStatNum (STAT_STATIC);
		curammo = cvar.getcvar("hd_garand_ammotype").getint();
		realammo = curammo;
		oldammo = curammo;
		return self;
	}

	static GarandAmmoThinker Get(){
		ThinkerIterator it = ThinkerIterator.Create('GarandAmmoThinker', STAT_STATIC);
		let p = GarandAmmoThinker(it.Next());

		if (!p)
			p = new ('GarandAmmoThinker').Init();

		return p;
	}
	
	override void Tick() {
		curammo = cvar.getcvar("hd_garand_ammotype").getint();
		if (oldammo != curammo) {
			oldammo = curammo;
			if (realammo == 0 && curammo != 0) {
				Console.Printf("Cannot change Garand to use 7mm while mid-game, .30-06 will be enabled for next game.");
			}
			else if (realammo > 0 && curammo == 0) {
				Console.Printf("Cannot change Garand to use .30-06 while mid-game, 7mm will be enabled for next game.");
			}
			else if (realammo > 0 && curammo != realammo) {
				realammo = curammo;
				ThinkerIterator it = ThinkerIterator.Create('HDGarand');
				HDGarand mo = HDGarand(it.Next());
				while(mo) {
					if (realammo == 2) { mo.bullet = "HDB_3006"; mo.tasbullet = true; }
					else { mo.bullet = "HDB_776"; mo.tasbullet = false; }
					mo = HDGarand(it.Next());
				}
			}
		}
	}
}

class HDGarand:AutoReloadingThingy{
	default{
		-hdweapon.fitsinbackpack
		obituary "%o got pinged by %k.";
		weapon.selectionorder 24;
		weapon.slotnumber 6;
		weapon.slotpriority 1;
		weapon.kickback 30;
		weapon.bobrangex 0.22;
		weapon.bobrangey 0.9;
		scale 0.55;
		hdweapon.barrelsize 32,0.7,1.2;
		hdweapon.refid "gar";
		tag "$TAG_GARAND";
		inventory.icon "M1A1Z0";
		
		hdweapon.loadoutcodes "
			\cuselectfire - 0/1, whether to come with full-auto capability or not
			\cureloader - 0/1, whether to come with a reloader or not";
	}
	override void Consolidate(){
		if (!(weaponstatus[0]&GARF_RELOADER)) 
			return;
		int totalpowder=owner.countinv("FourMilAmmo");
		int totalbrass=owner.countinv(brasstype);
		if(tas) totalbrass+=owner.countinv("SevenMilBrass")/2;
		int onppowder=totalpowder;
		//int onpbrass=totalbrass;
		let bp=hdbackpack(owner.findinventory("hdbackpack"));
		if(bp){
			totalpowder+=bp.Storage.getamount("fourmilammo");
			totalbrass+=bp.Storage.getamount(brasstype);
			if(tas) totalbrass+=bp.Storage.getamount("SevenMilBrass")/2;
		}
		if(!totalbrass||totalpowder<brasscost)return;
		int canmake=min(totalbrass,totalpowder/brasscost);
		//matter is being lost in this exchange. if you have a backpack you WILL have space.
		int onpspace=HDPickup.MaxGive(owner,round,tas?ENC_776*1.25:ENC_776);
		if(!bp)canmake=min(canmake,onpspace);

		//evaluate amounts
		totalpowder-=canmake*brasscost;
		totalbrass-=canmake;
		int didmake=canmake-random(0,canmake/10);

		//deduct inventory
		//remove inv first, then bp
		//int deductfrombp=canmake-onpbrass;
		int brassmake = canmake;
		if(tas) {
			brassmake-=ReloadBrass(bp, "ThirtyAughtSixBrass", 1, brassmake);
			if (brassmake > 0)
				brassmake-=ReloadBrass(bp, "SevenMilBrass", 2, brassmake);
			if (brassmake > 0)
				Console.Printf("You fucked up");
		}
		else {
			brassmake-=ReloadBrass(bp, "SevenMilBrass", 1, brassmake);
			if (brassmake > 0)
				Console.Printf("You fucked up");
		}
		int deductfrombp=canmake*brasscost-onppowder;
		owner.A_TakeInventory("fourmilammo",canmake*brasscost);
		if(deductfrombp>0)bp.Storage.addamount("fourmilammo",-deductfrombp);


		//add resulting rounds
		//fill up inv first, then bp
		if(didmake<1)return;

		int bpadd=didmake-onpspace;
		int onpadd=didmake-max(0,bpadd);

		if(bpadd>0)bp.Storage.addamount(round,bpadd);
		if(onpadd>0)owner.A_GiveInventory(round,onpadd);

		owner.A_Log("You reloaded "
			..didmake
			..(tas?" .30-06 rounds":" 7.76mm rounds")
			.." during your downtime.",true);
	}
	int ReloadBrass(HDBackpack bp, Class<Inventory> br, int cost, int amt) {
		int result = 0;
		if (amt > owner.CountInv(br)/cost) {
			result+=owner.CountInv(br)/cost;
			amt-=owner.CountInv(br)/cost;
			owner.A_TakeInventory(br,owner.CountInv(br));
			if (bp) {
				if (amt > bp.Storage.getamount(br)/cost) {
					result += bp.Storage.getamount(br)/cost;
					bp.Storage.addamount(br, -bp.Storage.getamount(br));
				}
				else {
					result += amt;
					bp.Storage.addamount(br, -amt*cost);
				}
			}
		}
		else {
			result+=amt;
			owner.A_TakeInventory(br,amt*cost);
		}
		return result;
	}
	override void actualpickup(actor other,bool silent){
		super.actualpickup(other,silent);
		if(!owner)return;
		omegachug = false;
		while(powders>0){
			powders--;
			if(owner.A_JumpIfInventory("FourMilAmmo",0,"null"))
				owner.A_SpawnItemEx("FourMilAmmo",0,0,owner.height-16,2,0,1);
			else HDF.Give(owner,"FourMilAmmo",1);
		}
		while(brass>0){
			brass--;
			if(owner.A_JumpIfInventory(brasstype,0,"null"))
				owner.A_SpawnItemEx(brasstype,0,0,owner.height-16,2,0,1);
			else HDF.Give(owner,brasstype,1);
		}
	}
	void A_MakeRound2(){
		if(brass<1||powders<brasscost){
			makinground=false;
			setstatelabel("spawn");
			return;
		}
		brass--;powders-=brasscost;
		A_StartSound("roundmaker/pop",10);
		if(!random(0,63)){
			A_SpawnItemEx("HDExplosion");
			A_Explode(32,32);
		}else A_SpawnItemEx(loose,0,0,0,1,0,3,0,SXF_NOCHECKPOSITION);
		reloadstart=false;
	}
	bool omegachug;
	bool reloadstart;
	int CheckChugBrass() {
		if (tas)
			return owner.countinv("ThirtyAughtSixBrass") + owner.countinv("SevenMilBrass")/2;
		else
			return owner.countinv("SevenMilBrass");
	}
	action void A_CheckChug2(bool anyotherconditions=true){
		if(
			anyotherconditions
			&&invoker.CheckChugBrass()
			&&countinv("FourMilAmmo")>=invoker.brasscost
		){
			invoker.makinground=true;
			int cap;
				cap = cvar.getcvar("hd_garand_reloadcapacity").getint();
				cap = clamp(8,cap,200);
			int counter;
			if (invoker.tas) {
				counter=min(cap,invoker.owner.countinv("ThirtyAughtSixBrass")+invoker.owner.countinv("SevenMilBrass")/2);
				invoker.brass=counter;
				if(counter > invoker.owner.countinv("ThirtyAughtSixBrass")) {
					A_TakeInventory("SevenMilBrass", (counter - invoker.owner.countinv("ThirtyAughtSixBrass"))*2);
					A_TakeInventory("ThirtyAughtSixBrass", invoker.owner.countinv("ThirtyAughtSixBrass"));
				}
				else
					A_TakeInventory("ThirtyAughtSixBrass", counter);
			}
			else {
				counter=min(cap,invoker.owner.countinv("SevenMilBrass"));
				invoker.brass=counter;
				A_TakeInventory("SevenMilBrass",counter);
			}
			counter=min(cap*invoker.brasscost,countinv("FourMilAmmo"));
			invoker.powders=counter;A_TakeInventory("FourMilAmmo",counter);
			invoker.reloadstart = true;
			dropinventory(invoker);
		}
	}
	class<HDBulletActor> bullet;
	class<HDMagAmmo> clip;
	class<HDRoundAmmo> round;
	class<HDAmmo> brasstype;
	class<HDUPK> spent;
	class<HDUPK> loose;
	class<HDGarandPing> ping;
	int brasscost;
	bool tasbullet, tas;
	bool wronground; //used for recoil
	override void PostBeginPlay(){
		super.PostBeginPlay();
		int v = (GarandAmmoThinker.Get()).realammo;
		if(v) {
			if (v == 2) { bullet = "HDB_3006"; tasbullet = true; }
			else { bullet = "HDB_776"; tasbullet = false; }
			clip = "HDGarandClip";
			round = "SevenMilAmmo";
			brasstype = "SevenMilBrass";
			spent = "HDSpent7mm";
			loose = "HDLoose7mm";
			ping = "HDGarandPing";
			brasscost = 4;
			tas = false;
		}
		else {
			bullet = "HDB_3006";
			clip = "HDGarand3006Clip";
			round = "ThirtyAughtSixAmmo";
			brasstype = "ThirtyAughtSixBrass";
			spent = "HDSpent3006";
			loose = "HDLoose3006";
			ping = "HDGarand3006Ping";
			brasscost = 5;
			tas = true;
			tasbullet = true;
		}
	}
	override string pickupmessage(){
		string s = "You got the "..gettag().."!";
		if (weaponstatus[0]&GARF_RELOADER)
			s=s.." It seems to have a built-in ammo reloader.";
		if (weaponstatus[0]&GARF_BUMP)
			s=s.." You notice some tool marks on it...";
		return s;
	}
	override string,double getpickupsprite(){return "M1A1Z0",1.;}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	override double gunmass(){
		return 10+((weaponstatus[0]&GARF_RELOADER)?1:0)+weaponstatus[GARS_MAG]*0.125;
	}
	override double weaponbulk(){
		return 105+((weaponstatus[0]&GARF_RELOADER)?10:0)+weaponstatus[GARS_MAG]*ENC_776_LOADED;
	}
	override void failedpickupunload(){
		failedpickupunloadmag(GARS_MAG,clip);
	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			if(owner.countinv(round))owner.A_DropInventory(round,8);
			else owner.A_DropInventory(clip,amt);
		}
	}
	int temp;
	override void tick(){
		super.tick();
		drainheat(GARS_HEAT,8);
	}
	override void ForceBasicAmmo(){
		owner.A_TakeInventory(round);
		owner.A_TakeInventory(clip);
		owner.A_GiveInventory(clip);
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			int nextmagloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory(clip)));
			if(nextmagloaded>=8)
				sb.drawimage("GCLPA0",(-56,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.5,1.5));
			else if (nextmagloaded==7)
				sb.drawimage("GCLPB0",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.5,1.5));
			else if (nextmagloaded==6)
				sb.drawimage("GCLPC0",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.5,1.5));
			else if (nextmagloaded==5)
				sb.drawimage("GCLPD0",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.5,1.5));
			else if (nextmagloaded==4)
				sb.drawimage("GCLPE0",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.5,1.5));
			else if (nextmagloaded==3)
				sb.drawimage("GCLPF0",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.5,1.5));
			else if (nextmagloaded==2)
				sb.drawimage("GCLPG0",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.5,1.5));
			else if (nextmagloaded==1)
				sb.drawimage("GCLPH0",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.5,1.5));
			else if(nextmagloaded==0)
				sb.drawimage("GCLPI0",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.5,1.5));
			else
				sb.drawimage("GCLPA0",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:0.6,scale:(1.5,1.5));
			sb.drawnum(hpl.countinv(clip),-43,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		if(hdw.weaponstatus[0]&GARF_BUMP){
			string llba="RBRSA3A7";
			if(hdw.weaponstatus[0]&GARF_BRRT)llba="STFULAUT";
			sb.drawimage(
				llba,(-22,-10),
				sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TRANSLATABLE|sb.DI_ITEM_RIGHT
			);
		}
		if (hdw.weaponstatus[GARS_MAG] > 0) sb.drawwepnum(hdw.weaponstatus[GARS_MAG],7);
		if(hdw.weaponstatus[GARS_CHAMBER]==2) {
			if (tasbullet && !(weaponstatus[0]&GARF_WRONGROUND))
				sb.drawrect(-20,-11,4,1);
			else
				sb.drawrect(-19,-11,3,1);
		}
	}
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_RELOAD.."  Reload clip\n"
		..WEPHELP_ALTRELOAD.."  Load loose rounds\n"
		..((weaponstatus[0]&GARF_BUMP)?(WEPHELP_FIREMODE.."  Semi/Auto\n"):"")
		..WEPHELP_MAGMANAGER
		..WEPHELP_UNLOADUNLOAD
		..((weaponstatus[0]&GARF_RELOADER)?(WEPHELP_UNLOAD.."+"..WEPHELP_USE.."  Assemble rounds"):"")
		;
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-4+bob.y,32,12,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*1.2;
		//bobb.y=clamp(bobb.y,-8,8);
		sb.drawimage(
			"garfrst",(0,-2)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9,scale:(0.5,0.5)
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"garbkst",(0,-9)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			scale:(0.5,0.5)
		);
		double dotoff=max(abs(bob.x),abs(bob.y));
		//sb.drawimage("riflsite",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER);
	}
	int CheckGarandAmmo() {
		if (tas)
			return owner.CountInv("ThirtyAughtSixAmmo") + owner.CountInv("SevenMilAmmo");
		else
			return owner.CountInv("SevenMilAmmo");
	}
	states{
	select0:
		M1A1 A 0;
		goto select0big;
	deselect0:
		M1A1 A 0;
		goto deselect0big;
	firemode:
		---- A 0{
			if(invoker.weaponstatus[0]&GARF_BUMP)invoker.weaponstatus[0]^=GARF_BRRT;
		}goto nope;
	ready:
		M1A1 A 1 A_WeaponReady(WRF_ALL);
		goto readyend;
	user3:
		---- A 0 A_MagManager(invoker.tas?"HDGarand3006Clip":"HDGarandClip");
		goto ready;
	/*altfire:
		goto chamber_manual;
	althold:
		goto nope;*/
	hold:
		#### A 0{
			if(!(invoker.weaponstatus[0]&GARF_BRRT))
				setweaponstate("nope");
		}goto fire;
	fire:
		M1A1 A 0;
	fire2:
		M1A1 A 1{
			if(invoker.weaponstatus[GARS_CHAMBER]==2)A_GunFlash();
			else setweaponstate("nope");
		}
		M1A1 B 1{
			A_StartSound("weapons/garandbolt",12);
			if(invoker.weaponstatus[GARS_CHAMBER]==1){
				actor brsss=null;
				double cosp=cos(pitch);
				Class<Actor> s = invoker.spent;
				if (invoker.tas && invoker.weaponstatus[0]&GARF_WRONGROUND)
					s = "HDSpent7mm";
				[cosp,brsss]=A_SpawnItemEx(s,
					cosp*6,0,height-8-sin(pitch)*6,
					cosp*(-2),2,3-sin(pitch),
					0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				brsss.vel+=vel;
				invoker.weaponstatus[GARS_CHAMBER]=0;
				invoker.weaponstatus[0]&=~GARF_WRONGROUND;
			}
			if(invoker.weaponstatus[GARS_MAG]==0){
				actor brsss=null;
				double cosp=cos(pitch);
				[cosp,brsss]=A_SpawnItemEx(invoker.ping,
					cosp*6,0,height-8-sin(pitch)*6,
					cosp*(-1),2,1.5-sin(pitch),
					0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				brsss.vel+=vel;
				A_StartSound("weapons/garandping",CHAN_WEAPON,CHANF_OVERLAP);
				A_StartSound("weapons/garandping",CHAN_WEAPON,CHANF_OVERLAP);
			}
			if (invoker.weaponstatus[GARS_MAG]==0)
				invoker.weaponstatus[GARS_MAG]--;
			else if (invoker.weaponstatus[GARS_MAG] > 0) {
				invoker.weaponstatus[GARS_MAG]--;
				invoker.weaponstatus[GARS_CHAMBER]=2;
			}
		}
		M1A1 C 1;
		M1A1 B 1;
		M1A1 A 0 A_ReFire();
		goto ready;
	flash:
		#### B 0{
			Class<HDBulletActor> b = invoker.bullet;
			if (invoker.tas && invoker.weaponstatus[0]&GARF_WRONGROUND) {
				b = "HDB_776";
				invoker.wronground = true;
			}
			let bbb=HDBulletActor.FireBullet(self,b);
			invoker.weaponstatus[GARS_CHAMBER]=1;
			A_AlertMonsters();

			A_ZoomRecoil(0.95);
			A_StartSound("weapons/bigrifle",CHAN_WEAPON);
			invoker.weaponstatus[GARS_HEAT]+=2;
		}
		M1A1 F 1 bright{
			HDFlashAlpha(32);
			A_Light1();
		}
		TNT1 A 0 { 
			if (invoker.tasbullet && !invoker.wronground) {
				A_MuzzleClimb(
						-0.11,-0.22,
						-frandom(0.4,0.7),-frandom(1.2,1.6),
						-frandom(0.3,0.5),-frandom(1.2,1.6)
				);
			}
			else {
				A_MuzzleClimb(
						-0.09,-0.18,
						-frandom(0.3,0.5),-frandom(1,1.3),
						-frandom(0.2,0.4),-frandom(1,1.3)
				);
			}
			invoker.wronground = false;
		}
		goto lightdone;
	pingstop:
		TNT1 A 17;
		TNT1 A 0 A_StopSound(27);
		stop;

	user4:
	unload:
		---- A 1 A_CheckChug2((invoker.weaponstatus[0]&GARF_RELOADER)&&pressinguse());
		#### A 0{
			invoker.weaponstatus[0]|=GARF_JUSTUNLOAD;
			invoker.weaponstatus[0]&=~GARF_LOOSEROUNDS;
			if(
				invoker.weaponstatus[GARS_MAG]>=0 || invoker.weaponstatus[GARS_CHAMBER]==2
			)setweaponstate("lower");
			//else if(invoker.weaponstatus[SMGS_CHAMBER]>0)setweaponstate("unloadchamber");
		}goto nope;
	altreload:
		#### A 0{
			invoker.weaponstatus[0]&=~GARF_JUSTUNLOAD;
			invoker.weaponstatus[0]|=GARF_LOOSEROUNDS;
			if(invoker.CheckGarandAmmo()) {
				if (invoker.weaponstatus[GARS_MAG]==7 && invoker.weaponstatus[GARS_CHAMBER]==2)
					setweaponstate("nope");
				else if (invoker.weaponstatus[GARS_MAG]>=0) {
					if (invoker.tas && !CountInv("ThirtyAughtSixAmmo"))
						setweaponstate("nope");
					else
						setweaponstate("lower");
				}
				else if (invoker.weaponstatus[GARS_CHAMBER]<2 || invoker.weaponstatus[0]&GARF_WRONGROUND)
					setweaponstate("lower");
			}
		}goto nope;
	reload:
		#### A 0{
			invoker.weaponstatus[0]&=~GARF_JUSTUNLOAD;
			invoker.weaponstatus[0]&=~GARF_LOOSEROUNDS;
			if(invoker.weaponstatus[GARS_MAG]>=7 && invoker.weaponstatus[GARS_CHAMBER]==2)setweaponstate("nope");
			else if(!CountInv(invoker.clip)) {
				setweaponstate("altreload");
			}
		}goto lower;
	lower:
		#### A 1 offset(0,38);
		#### A 1 offset(5,50);
		#### A 1 offset(10,62);
		#### B 2 offset(20,76);
		#### B 4 offset(30,92){
			A_MuzzleClimb(0.3,0.4);
			A_StartSound("weapons/garandlower",8,CHANF_OVERLAP);
		}
		#### B 0{
			if(invoker.weaponstatus[GARS_MAG]<0&&invoker.weaponstatus[GARS_CHAMBER]==0){
				setweaponstate("magout");
				return;
			}
		}
	unbolt:
		#### B 6 offset(34,90) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### B 7 offset(34,92) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### B 10 offset(32,94);
		#### B 3 offset(32,95){
			bool pocket;
			A_StartSound("weapons/garandunbolt",13);
			if(invoker.weaponstatus[GARS_CHAMBER]==2){
				if ((!PressingUnload()&&!PressingReload())
					||A_JumpIfInventory(invoker.round,0,"null")) {
					actor brsss=null;
					double cosp=cos(pitch);
					Class<Actor> los = invoker.loose;
					if (invoker.tas && invoker.weaponstatus[0]&GARF_WRONGROUND)
						los = "HDLoose7mm";
					[cosp,brsss]=A_SpawnItemEx(los,
						cosp*6,0,(height/2)-sin(pitch)*6,
						cosp*(-1),2,1.5-sin(pitch),
						0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
					brsss.vel+=vel;
				}
				else {
					A_StartSound("weapons/pocket",9);
					pocket=true;
					A_GiveInventory(invoker.round, 1);
				}
				invoker.weaponstatus[GARS_CHAMBER]=0;
				invoker.weaponstatus[0]&=~GARF_WRONGROUND;
			}
			else if(invoker.weaponstatus[GARS_CHAMBER]==1){
				actor brsss=null;
				double cosp=cos(pitch);
				Class<Actor> los = invoker.spent;
				if (invoker.tas && invoker.weaponstatus[0]&GARF_WRONGROUND)
						los = "HDSpent7mm";
				[cosp,brsss]=A_SpawnItemEx(los,
					cosp*6,0,(height/2)-sin(pitch)*6,
					cosp*(-2),2,3-sin(pitch),
					0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				brsss.vel+=vel;
				invoker.weaponstatus[GARS_CHAMBER]=0;
				invoker.weaponstatus[0]&=~GARF_WRONGROUND;
			}
			int magamt=invoker.weaponstatus[GARS_MAG];
			if
			(
				(
					magamt>0  
					&& (
						CountInv(invoker.clip) 
						|| invoker.weaponstatus[0]&GARF_JUSTUNLOAD
					)
					&& !(invoker.weaponstatus[0]&GARF_LOOSEROUNDS)
				) 
				|| magamt==0
			) {
				A_StartSound("weapons/garandping",27,CHANF_OVERLAP,volume:1.0-0.1*magamt);
				A_StartSound("weapons/garandping",27,CHANF_OVERLAP,volume:1.0-0.1*magamt);
				invoker.weaponstatus[GARS_MAG]=-1;
				if(
					(!PressingUnload()&&!PressingReload())
					||A_JumpIfInventory(invoker.clip,0,"null")
				){
					actor a = HDMagAmmo.SpawnMag(self,invoker.clip,magamt);
					a.vel.x *= -1;
					a.vel.y *= -1;
					a.vel.z += 5-0.5*magamt-sin(pitch);
					setweaponstate("magout");
				}else{
					HDMagAmmo.GiveMag(self,invoker.clip,magamt);
					if (!pocket)
						A_StartSound("weapons/pocket",9);
					setweaponstate("pocketclip");
				}
			} else if (pocket) setweaponstate("pocketclip");
			else setweaponstate("magout");
		}
	pocketclip:
		#### A 0 A_Overlay(27,"pingstop");
		#### B 5 offset(34,94) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
	magout:
		#### B 0{
			if(invoker.weaponstatus[0]&GARF_JUSTUNLOAD)setweaponstate("reloadend");
			else setweaponstate("loadmag");
		}

	loadmag:
		#### B 4 offset(34,94) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### B 5 offset(34,92) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### B 6 offset(32,90);
		#### B 1 offset(32,89){
			if (invoker.weaponstatus[GARS_MAG]<0) {
				if(CountInv(invoker.clip) && !(invoker.weaponstatus[0]&GARF_LOOSEROUNDS)) {
					let mmm=hdmagammo(findinventory(invoker.clip));
					if(mmm){
						if(mmm.mags[0] > 0)
							invoker.weaponstatus[GARS_CHAMBER]=2;
						invoker.weaponstatus[GARS_MAG]=max(mmm.TakeMag(true)-1,0);
						A_StartSound("weapons/garandclip",11);
						if (invoker.weaponstatus[GARS_CHAMBER]==2 || !CountInv(invoker.round))
							setweaponstate("reloadend");
						else  setweaponstate("loadmag");
					}
				}
				else if (CountInv(invoker.round)) {
					A_StartSound("weapons/garandround",11);
					invoker.weaponstatus[GARS_CHAMBER]=2;
					A_TakeInventory(invoker.round, 1, TIF_NOTAKEINFINITE);
				}
				else if (invoker.tas && CountInv("SevenMilAmmo")) {
					A_StartSound("weapons/garandround",11);
					invoker.weaponstatus[GARS_CHAMBER]=2;
					A_TakeInventory("SevenMilAmmo", 1, TIF_NOTAKEINFINITE);
					invoker.weaponstatus[0]|=GARF_WRONGROUND;
				}
			}
			else if (CountInv(invoker.round)) {
				A_StartSound("weapons/garandround",11);
				if (invoker.weaponstatus[GARS_MAG]==7)
					invoker.weaponstatus[GARS_CHAMBER]=2;
				else
					invoker.weaponstatus[GARS_MAG]++;
				A_TakeInventory(invoker.round, 1, TIF_NOTAKEINFINITE);
				if ((invoker.weaponstatus[GARS_MAG]<7 || invoker.weaponstatus[GARS_CHAMBER]==0) && CountInv(invoker.round))
					setweaponstate("loadmag");
			}
		}
		#### B 3 offset(32,91);
		#### B 0 {
			if (invoker.weaponstatus[GARS_CHAMBER]==0) {
				invoker.weaponstatus[GARS_CHAMBER]=2;
				invoker.weaponstatus[GARS_MAG]--;
			}
		}
		goto reloadend;

	reloadend:
		#### B 3 offset(30,92) {
			if(invoker.weaponstatus[GARS_CHAMBER]>0)
				A_StartSound("weapons/garandbolt",12);
		}
		#### B 2 offset(20,74);
		#### A 1 offset(10,62);
		#### A 1 offset(5,50);
		#### A 1 offset(0,38);
		goto nope;

	spawn:
		M1A1 Z -1 {
			if(
				invoker.makinground
				&&invoker.brass>0
				&&invoker.powders>=invoker.brasscost
			)setstatelabel("chug");
		}
		stop;
	chug:
		---- A 0 {
			if (invoker.omegachug) {
				setstatelabel("omegachug");
				return;
			}
			int spd = cvar.getcvar("hd_garand_reloadspeed").getint();
			spd = clamp(0,spd,6);
			if (spd == 0) setstatelabel("chug0");
			else if (spd == 1) setstatelabel("chug1");
			else if (spd == 2) setstatelabel("chug2");
			else if (spd == 3) setstatelabel("chug3");
			else if (spd == 4) setstatelabel("chug4");
			else if (spd == 5) setstatelabel("chug5");
			else setstatelabel("chug6");
		}
	chug0: //169
		---- AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 3{invoker.A_Chug();}
		---- A 10{invoker.A_MakeRound2();}
		goto spawn;
	chug1: //89
		---- AAAAAAAAAAAAAAAAAAAAAAAAAAA 3{invoker.A_Chug();}
		---- A 8{invoker.A_MakeRound2();}
		goto spawn;
	chug2: //46
		---- AAAAAAAAAAAAAAAAAAAA 2{invoker.A_Chug();}
		---- A 6{invoker.A_MakeRound2();}
		goto spawn;
	chug3: //24
		---- AAAAAAAAAA 2{invoker.A_Chug();}
		---- A 4{invoker.A_MakeRound2();}
		goto spawn;
	chug4: //14
		---- A 2 A_JumpIf(!invoker.reloadstart, 1);
		---- AAAAAA 2{invoker.A_Chug();}
		---- A 2{invoker.A_MakeRound2();}
		goto spawn;
	chug5: //7
		---- A 9 A_JumpIf(!invoker.reloadstart, 1);
		---- AAAAAA 1{invoker.A_Chug();}
		---- A 1{invoker.A_MakeRound2();}
		goto spawn;
	chug6: //4
		---- A 12 A_JumpIf(!invoker.reloadstart, 1);
		---- AAA 1{invoker.A_Chug();}
		---- A 1{invoker.A_MakeRound2();}
		goto spawn;
	omegachug: //4
		---- AAA 1{invoker.A_Chug2();}
		---- A 1{invoker.A_MakeRound2();}
		goto spawn;
	}
	void A_Chug2(){
		A_StartSound("roundmaker/chug1",8);
		A_StartSound("roundmaker/chug2",9);
		vel.z+=frandom(1.0,2.0);
		vel.x+=frandom(1.0,2.0)*cos(angle);
		vel.y+=frandom(1.0,2.0)*sin(angle);
	}
	override void initializewepstats(bool idfa){
		weaponstatus[GARS_MAG]=7;
		weaponstatus[GARS_CHAMBER]=2;
		weaponspecial=1337;
	}
	override void loadoutconfigure(string input){
		int bump=getloadoutvar(input,"selectfire",1);
		if(bump>0)weaponstatus[0]|=GARF_BUMP;
		//else weaponstatus[0]&=~GARF_BUMP;
		int load=getloadoutvar(input,"reloader",1);
		if(load>0)weaponstatus[0]|=GARF_RELOADER;
	}
}
enum garandstatus{
	GARF_BUMP=1,
	GARF_JUSTUNLOAD=2,
	GARF_RELOADER=4,
	GARF_LOOSEROUNDS=8,
	GARF_BRRT=16,
	GARF_WRONGROUND=32,

	GARS_FLAGS=0,
	GARS_MAG=1,
	GARS_HEAT=2,
	GARS_CHAMBER=3,
};

class HDGarandClipGiver:HDPickupGiver {
	default{
		inventory.icon "GCLPA0";
		hdpickup.refid "gac";
		tag "$TAG_GARANDCLIP";
	}

	override void beginplay(){
		super.beginplay();
		pickuptogive = hd_garand_ammotype == 0 ? "HDGarand3006Clip" : "HDGarandClip";
	}
}

class HDGarandClip:HDMagAmmo{
	default{
		hdmagammo.maxperunit 8;
		hdmagammo.roundtype "SevenMilAmmo";
		hdmagammo.roundbulk ENC_776*0.8;
		hdmagammo.magbulk 4;
		hdpickup.refid "";
		tag "$TAG_GARANDCLIP";
		xscale 0.7; yscale 0.6;
		inventory.maxamount 1000;
	}
	override string pickupmessage(){
		return "Picked up a "..gettag()..".";
	}
	override string,string,name,double getmagsprite(int thismagamt){
		string magsprite;
		if(thismagamt>7)magsprite="GCLPA0";
		else if(thismagamt>6)magsprite="GCLPB0";
		else if(thismagamt>5)magsprite="GCLPC0";
		else if(thismagamt>4)magsprite="GCLPD0";
		else if(thismagamt>3)magsprite="GCLPE0";
		else if(thismagamt>2)magsprite="GCLPF0";
		else if(thismagamt>1)magsprite="GCLPG0";
		else if(thismagamt>0)magsprite="GCLPH0";
		else magsprite="GCLPI0";
		return magsprite,"RBRSA3A7","SevenMilAmmo",1.5;
	}
	override void GetItemsThatUseThis(){
		itemsthatusethis.push("HDGarand");
	}
	states(actor){
	spawn:
		GCLP ABCDEFGHI -1 nodelay{
			int amt=mags[0];
			if(amt>7)frame=0;
			else if(amt>6)frame=1;
			else if(amt>5)frame=2;
			else if(amt>4)frame=3;
			else if(amt>3)frame=4;
			else if(amt>2)frame=5;
			else if(amt>1)frame=6;
			else if(amt>0)frame=7;
			else frame=8;
		}stop;
	spawnempty:
		GCLP I -1{
			brollsprite=true;brollcenter=true;
			roll=randompick(1,1,1,1,3,3,3,3,0,2)*90;
		}stop;
	}
}

class HDGarand3006Clip:HDGarandClip{
	default{
		hdmagammo.roundtype "ThirtyAughtSixAmmo";
		hdmagammo.roundbulk ENC_776;
		hdmagammo.magbulk 4;
	}
	override string,string,name,double getmagsprite(int thismagamt){
		string magsprite;
		if(thismagamt>7)magsprite="GCLPA0";
		else if(thismagamt>6)magsprite="GCLPB0";
		else if(thismagamt>5)magsprite="GCLPC0";
		else if(thismagamt>4)magsprite="GCLPD0";
		else if(thismagamt>3)magsprite="GCLPE0";
		else if(thismagamt>2)magsprite="GCLPF0";
		else if(thismagamt>1)magsprite="GCLPG0";
		else if(thismagamt>0)magsprite="GCLPH0";
		else magsprite="GCLPI0";
		return magsprite,"RBRSA3A7","ThirtyAughtSixAmmo",1.5;
	}
}

class HDGarandPing:HDDebris{
	default{
		bouncesound "";xscale 0.7; yscale 0.6;
	}
	states{
	spawn:
		GCLP I 1 nodelay{
			A_SetRoll(roll+22,SPF_INTERPOLATE);
		}loop;
	death:
		TNT1 A 1{
			HDMagAmmo a=HDMagAmmo(spawn("HDGarandClip",self.pos,ALLOW_REPLACE));
			a.roll=self.roll;a.vel=self.vel;
			a.mags.clear();
			a.amount=0;
			a.AddAMag(0);
		}stop;
	}
}

class HDGarand3006Ping:HDGarandPing{
states{
	death:
		TNT1 A 1{
			HDMagAmmo a=HDMagAmmo(spawn("HDGarand3006Clip",self.pos,ALLOW_REPLACE));
			a.roll=self.roll;a.vel=self.vel;
			a.mags.clear();
			a.amount=0;
			a.AddAMag(0);
		}stop;
	}
}

class HDGarandRandom:IdleDummy{
	states{
	spawn:
		TNT1 A 0 nodelay{
			let lll=HDGarand(spawn("HDGarand",pos,ALLOW_REPLACE));
			if(!lll)return;
			lll.special=special;
			lll.vel=vel;
			for(int i=0;i<5;i++)lll.args[i]=args[i];
			if(random(0,4)<2)lll.weaponstatus[0]|=GARF_RELOADER;
			if(!random(0,9))lll.weaponstatus[0]|=GARF_BUMP;
			let clipName = GarandAmmoThinker.get().realAmmo ? "HDGarandClip" : "HDGarand3006Clip";
			A_SpawnItemEx(clipName,randompick(-4,4),randompick(-4,4),0,0,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx(clipName,randompick(-3,3),randompick(-3,3),0,0,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx(clipName,randompick(-2,2),randompick(-2,2),0,0,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx(clipName,randompick(-1,1),randompick(-1,1),0,0,0,0,0,SXF_NOCHECKPOSITION);
		}stop;
	}
}
